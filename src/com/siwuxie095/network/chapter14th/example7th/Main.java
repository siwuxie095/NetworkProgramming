package com.siwuxie095.network.chapter14th.example7th;

/**
 * @author Jiajing Li
 * @date 2020-12-04 22:00:59
 */
public class Main {

    /**
     * 性能
     *
     * 在服务器的初始版本完成之后，他运行了一批性能测试。结果简直就是让人兴奋不已。在不断地增加了难以置信的负载之后，
     * 他看到新的服务器的上传在峰值时相比于旧版本的 LAMP 技术栈的快了 10~12 倍（完全数量级的更快），而且它能够支撑
     * 超过 1000 倍的并发上传，总共将近 10k 的并发上传（而这一切都只是运行在一个单一的 EC2 大型实例之上）。
     *
     * 下面的这些因素促成了这一点。
     * （1）它运行在一个调优的 JVM 中。
     * （2）它运行在一个高度调优的自定义技术栈中，是专为解决这个问题而创建的，而不是一个通用的 Web 框架。
     * （3）该自定义的技术栈通过 Netty 使用了 NIO（基于选择器的模型）构建，这意味着不同于每个客户端一个进程的 LAMP
     * 技术栈，它可以扩展到上万甚至是几十万的并发连接。
     * （4）再也没有以两个单独的，先接收一个完整的文件，然后再将其上传到 S3 的步骤所带来的开销了。现在文件将直接流向
     * S3。
     * （5）因为服务器现在对文件进行了流式处理，所以：
     * 1）它再也不会花时间在 I/O 操作上了，即将数据写入临时文件，并在稍后的第二阶段上传中读取它们；
     * 2）对于每个上传也将消耗更少的内存，这意味着可以进行更多的并行上传。
     * （6）缩略图生成变成了一个异步的后处理。
     */
    public static void main(String[] args) {

    }

}
