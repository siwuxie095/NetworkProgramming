package com.siwuxie095.network.chapter14th.example20th;

/**
 * @author Jiajing Li
 * @date 2020-12-05 13:59:04
 */
public class Main {

    /**
     * Netty 擅长管理大量的并发连接
     *
     * Netty 使得可以轻松地在 JVM 平台上支持异步 I/O。因为 Netty 运行在 JVM 之上，并且因为 JVM 在 Linux 上
     * 将最终使用 Linux 的 epoll 方面的设施来管理套接字文件描述符中所感兴趣的事件（interest），所以 Netty 使
     * 得开发者能够轻松地接受大量打开的套接字 —— 每一个 Linux 进程将近一百万的 TCP 连接，从而适应快速增长的移动
     * 设备的规模。有了这样的伸缩能力，服务提供商便可以在保持低成本的同时，允许大量的设备连接到物理服务器上的一个
     * 单独的进程。
     *
     * PS：注意，在这种情况下物理服务器的区别。尽管虚拟化提供了许多的好处，但是领先的云计算提供商仍然未能支持到单
     * 个虚拟主机超过 200 000 ~ 300 000 的并发 TCP 连接。当连接达到或者超过这种规模时，建议使用裸机（bare metal）
     * 服务器，并且密切关注网络接口卡（Network Interface Card，NIC）提供商。
     *
     * 在受控的测试以及优化了配置选项以使用少量的内存的条件下，一个基于 Netty 的服务得以容纳略少于 100 万（约为
     * 998 000）的连接。在这种情况下，这个限制从根本上来说是由于 Linux 内核强制硬编码了每个进程限制 100 万个文
     * 件句柄。如果 JVM 本身没有持有大量的套接字以及用于 JAR 文件的文件描述符，那么该服务器可能本能够处理更多的
     * 连接，而所有的这一切都在一个 4GB 大小的堆上。利用这种效能，Urban Airship 成功地维持了超过 2000 万的到
     * 它的基础设施的持久化的 TCP 套接字连接以进行消息递交，所有的这一切都只使用了少量的服务器。
     *
     * 值得注意的是，虽然在实践中，一个单一的基于 Netty 的服务便能够处理将近 1 百万的入站 TCP 套接字连接，但是
     * 这样做并不一定就是务实的或者明智的。如同分布式计算中的所有陷阱一样，主机将会失败、进程将需要重新启动并且将
     * 会发生不可预期的行为。由于这些现实的问题，适当的容量规划意味着需要考虑到单个进程失败的后果。
     */
    public static void main(String[] args) {

    }

}
