package com.siwuxie095.network.chapter15th.example16th;

/**
 * @author Jiajing Li
 * @date 2020-12-06 11:10:29
 */
public class Main {

    /**
     * 组合服务
     *
     * Finagle 的服务即函数（service-as-a-function）的观点允许编写简单但富有表现力的代码。例如，
     * 一个用户发出的对于他们的主页时间线的请求涉及了大量的服务，其中的核心是身份验证服务、时间线服
     * 务以及推特服务。这些关系可以被简洁地表达。
     *
     * 在这里，他们为时间线服务、推特服务以及身份验证服务都创建了客户端。并且，为了对原始的请求进行
     * 身份验证，创建了一个过滤器。最后，他们实现的服务，结合了身份验证过滤器，暴露在 80 端口上。
     *
     * 当收到请求时，身份验证过滤器将尝试对它进行身份验证。错误都会被立即返回，不会影响核心业务。身
     * 份验证成功之后，AuthReq 将会被发送到 API 服务。该服务将会使用附加的 userId 通过时间线服务
     * 来查找该用户的时间线。然后，返回一组推特 ID，并在稍后遍历。每个 ID 都会被用来请求与之相关联
     * 的推特。最后，这组推特请求会被收集起来，转换为一个 JSON 格式的响应。
     *
     * 正如你所看到的，他们定义了数据流，并且将并发的问题留给了 Finagle。他们不必管理线程池，也不必
     * 担心竞态条件。使得这段代码既清晰又安全。
     *
     * 另外：部分摘要代码，可参考 PDF。
     */
    public static void main(String[] args) {

    }

}
