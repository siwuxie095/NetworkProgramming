package com.siwuxie095.network.chapter15th.example15th;

/**
 * @author Jiajing Li
 * @date 2020-12-06 11:01:55
 */
public class Main {

    /**
     * 故障管理
     *
     * 他们假设故障总是会发生，硬件会失效、网络会变得拥塞、网络链接会断开。对于库来说，如果它们正在上面运行的或者
     * 正在与之通信的系统发生故障，那么库所拥有的极高的吞吐量以及极低的延迟都将毫无意义。为此，Finagle 是建立在
     * 有原则地管理故障的基础之上的。为了能够更好地管理故障，它牺牲了一些吞吐量以及延迟。
     *
     * Finagle 可以通过隐式地使用延迟作为启发式（算法的因子）来均衡跨集群主机的负载。Finagle 客户端将在本地通过
     * 统计派发到单个主机的还未完成的请求数来追踪它所知道的每个主机上的负载。有了这些信息，Finagle 会将新的请求
     * （隐式地）派发给具有最低负载、最低延迟的主机。
     *
     * 失败的请求将导致 Finagle 关闭到故障主机的连接，并将它从负载均衡器中移除。在后台，Finagle 将不断地尝试重
     * 新连接。只有在 Finagle 能够重新建立一个连接时，该主机才会被重新加入到负载均衡器中。然后，服务的所有者可以
     * 自由地关闭各个主机，而不会对下游的客户端造成负面的影响。
     */
    public static void main(String[] args) {

    }

}
