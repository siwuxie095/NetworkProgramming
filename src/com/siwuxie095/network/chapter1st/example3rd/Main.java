package com.siwuxie095.network.chapter1st.example3rd;

/**
 * @author Jiajing Li
 * @date 2020-11-04 21:59:51
 */
public class Main {

    /**
     * Netty 简介
     *
     * 在以前，支持成千上万的并发客户端被认定为是不可能的。然而今天，作为系统用户，却早已将这种能力视为理所当然；同时作为
     * 开发人员，是期望将水平线提得更高的，也就是支撑更多的并发的客户端。因为总会有更高的吞吐量和可扩展性的要求 —— 在更低
     * 成本的基础上进行交付。
     *
     * 不要低估了最后一点的重要性。从漫长的痛苦经历中已经学到：直接使用底层的API 暴露了复杂性，并且引入了对往往供不应求的
     * 技能的关键性依赖（实际上是因为熟悉这些底层的 API 的人员少）。这也就是，面向对象的基本概念：用较简单的抽象隐藏底层
     * 实现的复杂性。
     *
     * 这一原则也催生了大量框架的开发，它们为常见的编程任务封装了解决方案，其中许多都和分布式系统的开发密切相关。这里可以
     * 确定地说：所有专业的 Java 开发人员都至少对这些框架熟知一二，比如 Spring 框架。对于许多人来说，这些框架已经变得
     * 不可或缺，因为它们既能满足技术需求，又能满足时间表。
     *
     * 在网络编程领域，Netty 是 Java 中一款卓越的框架。它驾驭了 Java 高级 API 的能力，并将其隐藏在一个易于使用的 API
     * 之后。Netty 使你可以专注于自己真正感兴趣的内容 —— 你的应用程序的独一无二的价值。
     *
     * 在开始深入地了解 Netty 之前，请仔细审视下面所总结的关键特性。有些是技术性的，而其他更多的则是关于架构或设计哲学的。
     *
     * （1）设计
     * 1）统一的 API，支持多种传输类型，阻塞的和非阻塞的；
     * 2）简单而强大的线程模型；
     * 3）真正的无连接数据报套接字支持；
     * 4）链接逻辑组件以支持复用；
     *
     * （2）易于使用
     * 1）详实的 Javadoc 和大量的示例集；
     * 2）不需要超过 JDK 1.6+ 的依赖（一些可选的特性可能需要 Java 1.7+ 和或 额外的依赖）；
     *
     * （3）性能
     * 1）拥有比 Java 的核心 API 更高的吞吐量以及更低的延迟；
     * 2）得益于池化和复用，拥有更低的资源消耗；
     * 3）最少的内存复制
     *
     * （4）健壮性
     * 1）不会因为慢速、快速或者超载的连接而导致 OutOfMemoryError；
     * 2）消除在高速网络中 NIO 应用程序常见的不公平读/写比率；
     *
     * （5）安全性
     * 1）完整的 SSL/TLS 以及 StartTLS 支持；
     * 2）可用于受限环境下，如 Applet 和 OSGI；
     *
     * （6）社区驱动
     * 1）发布快速而且频繁
     *
     *
     *
     * 谁在使用 Netty
     *
     * Netty 拥有一个充满活力并且不断壮大的用户社区，其中不乏大型公司，如 Apple、Twitter、 Facebook、Google、Square
     * 和 Instagram，还有流行的开源项目，如 Infinispan、HornetQ、Vert.x、Apache Cassandra 和 Elasticsearch，它
     * 们所有的核心代码都利用了 Netty 强大的网络抽象。在初创企业中，Firebase 和 Urban Airship 也在使用 Netty，前者用
     * 来做 HTTP 长连接，而后者用来支持各种各样的推送通知。
     *
     * PS：完整的已知采用者列表参见 https://netty.io/wiki/adopters.html
     *
     * 每当使用 Twitter，便是在使用 Finagle，它是基于 Netty 的系统间通信框架。Facebook 在 Nifty 框架中使用了 Netty，
     * 它提供了 Apache Thrift 服务。可伸缩性和性能对这两家公司来说至关重要，他们也经常为 Netty 贡献代码。
     *
     * PS：
     * （1）Finagle 的更多信息可参见 https://twitter.github.io/finagle/
     * （2）Nifty 的更多信息可参见 https://github.com/facebookarchive/nifty
     *
     * 反过来，Netty 也已从这些项目中受益，通过实现 FTP、SMTP、HTTP 和 WebSocket 以及其他的基于二进制和基于文本的协议，
     * Netty 扩展了它的应用范围及灵活性。
     *
     *
     *
     * 异步和事件驱动
     *
     * 因为要大量地使用 "异步" 这个词，所以现在是一个澄清上下文的好时机。异步（也就是非同步）事件肯定大家都熟悉。考虑一下
     * 电子邮件：你可能会、也可能不会收到你已经发出去的电子邮件对应的回复，或者你也可能会在正在发送一封电子邮件的时候收到
     * 一个意外的消息。异步事件也可以具有某种有序的关系。通常，你只有在已经问了一个问题之后才会得到一个和它对应的答案，而在
     * 你等待它的同时，你也可以做点别的事情。
     *
     * 在日常的生活中，异步自然而然地就发生了，所以你可能没有对它考虑过多少。但是让一个计算机程序以相同的方式工作就会产生一
     * 些非常特殊的问题。本质上，一个既是异步的又是事件驱动的系统会表现出一种特殊的、极具价值的行为：它可以以任意的顺序响应
     * 在任意的时间点产生的事件。
     *
     * 这种能力对于实现最高级别的可伸缩性至关重要，定义为："一种系统、网络或者进程在需要处理的工作不断增长时，可以通过某种
     * 可行的方式或者扩大它的处理能力来适应这种增长的能力"。
     *
     * 异步和可伸缩性之间的联系又是什么呢？
     * （1）非阻塞网络调用使得用户可以不必等待一个操作的完成。完全异步的 I/O 正是基于这个特性构建的，并且更进一步：异步方法
     * 会立即返回，并且在它完成时，会直接或者在稍后的某个时间点通知用户。
     * （2）选择器使得用户能够通过较少的线程便可监视许多连接上的事件。
     *
     * 将这些元素结合在一起，与使用阻塞 I/O 来处理大量事件相比，使用非阻塞 I/O 来处理更快速、更经济。从网络编程的角度来看，
     * 这是构建理想系统的关键，而且这也是 Netty 设计底蕴的关键。
     */
    public static void main(String[] args) {

    }

}
