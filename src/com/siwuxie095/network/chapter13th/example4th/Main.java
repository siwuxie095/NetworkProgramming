package com.siwuxie095.network.chapter13th.example4th;

/**
 * @author Jiajing Li
 * @date 2020-12-02 07:54:35
 */
public class Main {

    /**
     * UDP 示例应用程序
     *
     * 这里的示例程序将打开一个文件，随后将会通过 UDP 把每一行都作为一个消息广播到一个指定的端口。如果你熟悉
     * 类 UNIX 操作系统，你可能会认识到这是标准的 syslog 实用程序的一个非常简化的版本。UDP 非常适合于这样
     * 的应用程序，因为考虑到日志文件本身已经被存储在了文件系统中，因此，偶尔丢失日志文件中的一两行是可以容忍
     * 的。此外，该应用程序还提供了极具价值的高效处理大量数据的能力。
     *
     * 接收方是怎么样的呢？通过 UDP 广播，只需简单地通过在指定的端口上启动一个监听程序，便可以创建一个事件监
     * 视器来接收日志消息。需要注意的是，这样的轻松访问性也带来了潜在的安全隐患，这也就是为何在不安全的环境中
     * 并不倾向于使用 UDP 广播的原因之一。出于同样的原因，路由器通常也会阻止广播消息，并将它们限制在它们的来
     * 源网络上。
     *
     * 关于发布/订阅模式：
     * 类似于 syslog 这样的应用程序通常会被归类为发布/订阅模式：一个生产者或者服务发布事件，而多个客户端进
     * 行订阅以接收它们。
     *
     * 整个系统的一个高级别视图是这样，其由一个广播者以及一个或者多个事件监视器所组成。广播者将监听新内容的出
     * 现，当它出现时，则通过 UDP 将它作为一个广播消息进行传输。
     *
     * 所有的在该 UDP 端口上监听的事件监视器都将会接收到广播消息。
     *
     * 为了简单起见，这里将不会为示例程序添加身份认证、验证或者加密。但是，要加入这些功能并使得其成为一个健壮
     * 的、可用的实用程序应该也不难。
     *
     * 后续将开始探讨该广播者组件的设计以及实现细节。
     */
    public static void main(String[] args) {

    }

}
